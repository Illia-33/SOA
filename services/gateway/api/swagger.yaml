openapi: 3.0.3
info:
  title: Gateway API
  description: REST API for registration/authentication, profiles, pages, posts, comments, and statistics.
  version: "1.0.0"

servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: Auth
  - name: Profiles
  - name: Page
  - name: Posts
  - name: Comments
  - name: Metrics
  - name: Top

paths:
  /profile:
    post:
      tags: [Profiles]
      summary: Register a new profile
      operationId: registerProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterProfileRequest'
      responses:
        "200":
          description: Profile successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterProfileResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile/{profile_id}:
    get:
      tags: [Profiles]
      summary: Get profile information
      operationId: getProfile
      parameters:
        - name: profile_id
          in: path
          required: true
          description: Unique profile identifier
          schema:
            type: string
      responses:
        "200":
          description: Profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileResponse'
        "400":
          description: Invalid profile_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Profiles]
      summary: Edit profile
      operationId: editProfile
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditProfileRequest'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Profiles]
      summary: Delete profile
      operationId: deleteProfile
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth:
    post:
      tags: [Auth]
      summary: Authenticate user
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
      responses:
        "200":
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api_token:
    post:
      tags: [Auth]
      summary: Create API token
      operationId: createApiToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
      responses:
        "200":
          description: API token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiTokenResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Invalid authentication credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile/{profile_id}/page/settings:
    get:
      tags: [Page]
      summary: Get page settings
      operationId: getPageSettings
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Page settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPageSettingsResponse'
        "400":
          description: Invalid profile_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Page]
      summary: Edit page settings
      operationId: editPageSettings
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPageSettingsRequest'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile/{profile_id}/page/posts:
    get:
      tags: [Posts]
      summary: Get page posts (paginated)
      operationId: getPosts
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPostsRequest'
      responses:
        "200":
          description: Posts page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostsResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Profile or page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Posts]
      summary: Create a new post on the page
      operationId: newPost
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: profile_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPostRequest'
      responses:
        "200":
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPostResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Profile or page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{post_id}:
    get:
      tags: [Posts]
      summary: Get a post by id
      operationId: getPost
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Invalid post_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Posts]
      summary: Edit post
      operationId: editPost
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPostRequest'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Posts]
      summary: Delete post
      operationId: deletePost
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{post_id}/comments:
    post:
      tags: [Comments]
      summary: Add a new comment to a post
      operationId: newComment
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCommentRequest'
      responses:
        "200":
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewCommentResponse'
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Comments]
      summary: Get post comments (paginated)
      operationId: getComments
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentsRequest'
      responses:
        "200":
          description: Comments page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{post_id}/views:
    post:
      tags: [Posts]
      summary: Register a post view
      operationId: newView
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: View registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{post_id}/likes:
    post:
      tags: [Posts]
      summary: Put a like on a post
      operationId: newLike
      security:
        - bearerAuth: []
        - soaTokenAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Like registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden (insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{post_id}/metric:
    get:
      tags: [Metrics]
      summary: Get a metric count for a post
      operationId: getPostMetric
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPostMetricRequest'
      responses:
        "200":
          description: Metric count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostMetricResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{post_id}/metric_dynamics:
    get:
      tags: [Metrics]
      summary: Get daily metric dynamics for a post
      operationId: getPostMetricDynamics
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPostMetricDynamicsRequest'
      responses:
        "200":
          description: Metric dynamics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostMetricDynamicsResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /top10/posts:
    get:
      tags: [Top]
      summary: Get top 10 posts by metric
      operationId: getTop10Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTop10PostsRequest'
      responses:
        "200":
          description: Top posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTop10PostsResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /top10/users:
    get:
      tags: [Top]
      summary: Get top 10 users by metric
      operationId: getTop10Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTop10UsersRequest'
      responses:
        "200":
          description: Top users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTop10UsersResponse'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterProfileRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
        phone_number:
          type: string
        name:
          type: string
        surname:
          type: string
      required: [login, password, email, phone_number, name, surname]

    RegisterProfileResponse:
      type: object
      properties:
        profile_id:
          type: string

    GetProfileResponse:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        birthday:
          type: string
          format: date
        bio:
          type: string

    EditProfileRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        birthday:
          type: string
          format: date
        bio:
          type: string

    AuthenticateRequest:
      description: Exactly one of login, email, phone_number must be provided along with password.
      oneOf:
        - type: object
          properties:
            login: { type: string }
            password: { type: string, format: password }
          required: [login, password]
        - type: object
          properties:
            email: { type: string, format: email }
            password: { type: string, format: password }
          required: [email, password]
        - type: object
          properties:
            phone_number: { type: string }
            password: { type: string, format: password }
          required: [phone_number, password]

    AuthenticateResponse:
      type: object
      properties:
        token:
          type: string

    CreateApiTokenRequest:
      type: object
      properties:
        auth:
          $ref: '#/components/schemas/AuthenticateRequest'
        read_access:
          type: boolean
        write_access:
          type: boolean
        ttl:
          type: string
          description: Token lifetime (e.g., "1h", "24h")
          example: "24h"
      required: [auth, read_access, write_access, ttl]

    CreateApiTokenResponse:
      type: object
      properties:
        token:
          type: string

    GetPageSettingsResponse:
      type: object
      properties:
        visible_for_unauthorized:
          type: boolean
        comments_enabled:
          type: boolean
        anyone_can_post:
          type: boolean

    EditPageSettingsRequest:
      type: object
      properties:
        visible_for_unauthorized:
          type: boolean
        comments_enabled:
          type: boolean
        anyone_can_post:
          type: boolean

    NewPostRequest:
      type: object
      properties:
        text:
          type: string
        repost:
          type: integer
          format: int32
      required: [text]

    NewPostResponse:
      type: object
      properties:
        post_id:
          type: integer
          format: int32

    Post:
      type: object
      properties:
        id:
          type: integer
          format: int32
        author_id:
          type: integer
          format: int32
        text:
          type: string
        source_post_id:
          type: integer
          format: int32
          nullable: true
        pinned:
          type: boolean
        views_count:
          type: integer
          format: int32

    GetPostsRequest:
      type: object
      properties:
        page_token:
          type: string

    GetPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        next_page_token:
          type: string

    EditPostRequest:
      type: object
      properties:
        text:
          type: string
        pinned:
          type: boolean

    NewCommentRequest:
      type: object
      properties:
        content:
          type: string
        reply_comment_id:
          type: integer
          format: int32
      required: [content]

    NewCommentResponse:
      type: object
      properties:
        comment_id:
          type: integer
          format: int32

    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        author_id:
          type: integer
          format: int32
        content:
          type: string
        reply_comment_id:
          type: integer
          format: int32
          nullable: true

    GetCommentsRequest:
      type: object
      properties:
        page_token:
          type: string

    GetCommentsResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        next_page_token:
          type: string

    GetPostMetricRequest:
      type: object
      properties:
        metric:
          $ref: '#/components/schemas/Metric'
      required: [metric]

    GetPostMetricResponse:
      type: object
      properties:
        count:
          type: integer

    GetPostMetricDynamicsRequest:
      type: object
      properties:
        metric:
          $ref: '#/components/schemas/Metric'
      required: [metric]

    DayDynamics:
      type: object
      properties:
        day:
          type: string
          format: date
        count:
          type: integer

    GetPostMetricDynamicsResponse:
      type: object
      properties:
        dynamics:
          type: array
          items:
            $ref: '#/components/schemas/DayDynamics'

    GetTop10PostsRequest:
      type: object
      properties:
        metric:
          $ref: '#/components/schemas/Metric'
      required: [metric]

    PostStats:
      type: object
      properties:
        post_id:
          type: integer
          format: int32
        value:
          type: integer

    GetTop10PostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostStats'

    GetTop10UsersRequest:
      type: object
      properties:
        metric:
          $ref: '#/components/schemas/Metric'
      required: [metric]

    UserStats:
      type: object
      properties:
        user_id:
          type: string
        value:
          type: integer

    GetTop10UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserStats'

    Metric:
      type: string
      description: Metric type
      enum: [view_count, like_count, comment_count]

    EmptyResponse:
      type: object
      description: Empty response ({})

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Machine-readable error code
          example: invalid_input
        message:
          type: string
          description: Human-readable error message
          example: Email is required

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    soaTokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        Use long-lived API tokens with the format:
        Authorization: SoaToken <API_KEY>
