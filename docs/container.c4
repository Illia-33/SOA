model {
    gateway = service {
        title 'Gateway'
        description 'Provides public REST API for UI; delegates to internal gRPC services'
        technology 'Go + Gin'
    }

    accountsService = service {
        title 'Accounts Service'
        description 'Registers accounts, authenticates users, issues JWT and API tokens'
        technology 'Go + gRPC'
    }

    accountsDb = database {
        title 'Accounts DB'
        description 'Storage of account and profile data'
        technology 'PostgreSQL'
    }

    postsService = service {
        title 'Posts Service'
        description 'Pages, posts, comments. Emits events via outbox to Kafka'
        technology 'Go + gRPC'
    }

    postsDb = database {
        title 'Posts DB'
        description 'Storage of page, post and comment data'
        technology 'PostgreSQL'
    }

    statisticsService = service {
        title 'Statistics Service'
        description 'Consumes events, aggregates metrics, serves analytics via gRPC'
        technology 'Go + gRPC'
    }

    statisticsDb = database {
        title 'Statistics DB'
        description 'Analytics data store (events and aggregates)'
        technology 'ClickHouse'
    }

    statisticsBroker = broker {
        title 'Statistic events broker'
        description 'Event stream for views, likes, comments, registrations, posts'
        technology 'Kafka'
    }

    user -> gateway 'Uses REST API'

    gateway -> accountsService 'gRPC'
    gateway -> postsService 'gRPC'
    gateway -> statisticsService 'gRPC'

    accountsService -> accountsDb 'SQL'

    postsService -> postsDb 'SQL'

    accountsService -> statisticsBroker 'Produce events'
    postsService -> statisticsBroker 'Produce events'

    statisticsService -> statisticsBroker 'Consume events'
    statisticsService -> statisticsDb 'SQL'
}

views {
    view of socialNetworkApp {
        title 'Container view'

        include user
        
        group 'Social Network Application' {
            include gateway,
                    accountsService,
                    postsService,
                    postsDb,
                    statisticsService,
                    statisticsDb,
                    statisticsBroker,
                    accountsDb
        }
    }
}
