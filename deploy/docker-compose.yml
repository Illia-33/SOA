services:
  gateway:
    build:
      dockerfile: ${PWD}/services/gateway/Dockerfile
    container_name: gateway-service
    depends_on:
      accounts:
        condition: service_started
      posts:
        condition: service_started
      stats:
        condition: service_started
    environment:
      GATEWAY_SERVICE_PORT: ${GATEWAY_SERVICE_PORT}
      JWT_ED25519_PUBLIC_KEY: ${JWT_ED25519_PUBLIC_KEY}
      ACCOUNTS_SERVICE_HOST: "accounts-service"
      ACCOUNTS_SERVICE_PORT: ${ACCOUNTS_SERVICE_PORT}
      POSTS_SERVICE_HOST: "posts-service"
      POSTS_SERVICE_PORT: ${POSTS_SERVICE_PORT}
    ports:
      - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"

  accounts-postgres:
    image: postgres:17-alpine
    container_name: accounts-postgres
    environment:
      POSTGRES_USER: ${ACCOUNTS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ACCOUNTS_POSTGRES_PASSWORD}
      POSTGRES_DB: accounts-postgres
    volumes:
      - ${PWD}/services/accounts/db/migrations:/docker-entrypoint-initdb.d
      - ${ACCOUNTS_POSTGRES_DATA}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --username ${ACCOUNTS_POSTGRES_USER} --dbname accounts-postgres
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s

  accounts:
    build:
      dockerfile: ${PWD}/services/accounts/Dockerfile
    container_name: accounts-service
    depends_on:
      accounts-postgres:
        condition: service_healthy
      stats-kafka:
        condition: service_healthy
    environment:
      ACCOUNTS_SERVICE_PORT: ${ACCOUNTS_SERVICE_PORT}
      DB_HOST: "accounts-postgres"
      DB_USER: ${ACCOUNTS_POSTGRES_USER}
      DB_PASSWORD: ${ACCOUNTS_POSTGRES_PASSWORD}
      DB_POOL_SIZE: 5
      JWT_ED25519_PRIVATE_KEY: ${JWT_ED25519_PRIVATE_KEY}

  posts-postgres:
    image: postgres:17-alpine
    container_name: posts-postgres
    environment:
      POSTGRES_USER: ${POSTS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTS_POSTGRES_PASSWORD}
      POSTGRES_DB: posts-postgres
    volumes:
      - ${PWD}/services/posts/db/migrations:/docker-entrypoint-initdb.d
      - ${POSTS_POSTGRES_DATA}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --username ${POSTS_POSTGRES_USER} --dbname posts-postgres
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s

  posts:
    build:
      dockerfile: ${PWD}/services/posts/Dockerfile
    container_name: posts-service
    depends_on:
      posts-postgres:
        condition: service_healthy
    environment:
      POSTS_SERVICE_PORT: ${POSTS_SERVICE_PORT}
      DB_HOST: "posts-postgres"
      DB_USER: ${POSTS_POSTGRES_USER}
      DB_PASSWORD: ${POSTS_POSTGRES_PASSWORD}
      DB_POOL_SIZE: 5
      JWT_ED25519_PUBLIC_KEY: ${JWT_ED25519_PUBLIC_KEY}

  stats-kafka:
    image: apache/kafka:4.1.0
    container_name: stats-kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://stats-kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - ${STATS_KAFKA_DATA}:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 5
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: stats-kafka:9092
      KAFKA_CLUSTERS_0_READONLY: "false"
    depends_on:
      stats-kafka:
        condition: service_healthy

  stats-clickhouse:
    image: clickhouse/clickhouse-server:25.6
    container_name: stats-clickhouse
    environment:
      CLICKHOUSE_USER: ${STATS_CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${STATS_CLICKHOUSE_PASSWORD}
    volumes:
      - ${PWD}/services/stats/db/migrations:/docker-entrypoint-initdb.d
      - ${STATS_CLICKHOUSE_DATA}:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1;"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  stats:
    build:
      dockerfile: ${PWD}/services/stats/Dockerfile
    container_name: stats-service
    depends_on:
      stats-clickhouse:
        condition: service_healthy
      stats-kafka:
        condition: service_healthy
    environment:
      STATS_SERVICE_PORT: ${STATS_SERVICE_PORT}
      DB_HOST: "stats-clickhouse"
      DB_PORT: 9000
      DB_USER: ${STATS_CLICKHOUSE_USER}
      DB_PASSWORD: ${STATS_CLICKHOUSE_PASSWORD}
      KAFKA_HOST: "stats-kafka"
      KAFKA_PORT: 9092
